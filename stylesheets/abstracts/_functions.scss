///
/// Generate a black color with opacity
///
/// @param {Number} $opacity [1] - A value between 0 and 1
///

@function black($opacity: 1){
  @return rgba(0, 0, 0, $opacity)
}

///
/// Generate a white color with opacity
///
/// @param {Number} $opacity [1] - A value between 0 and 1
/// @return {Color}
///

@function white($opacity: 1){
  @return rgba(255, 255, 255, $opacity)
}


@function parse-media($expression) {
  $operator: "";
  $value: "";
  $unit: "";
  $element: "";
  $result: "";
  $is-width: true;


  // Separating the operator from the rest of the expression
  @if (str-slice($expression, 2, 2) == "=") {
    $operator: str-slice($expression, 1, 2);
    $value: str-slice($expression, 3);
  } @else if ((str-slice($expression, 1, 1) == "=") or
              (str-slice($expression, 1, 1) == "<") or
              (str-slice($expression, 1, 1) == ">")) {
    $operator: str-slice($expression, 1, 1);
    $value: str-slice($expression, 2);
  } @else {
    // If a unitless value was provided, the operator is >=
    $operator: '>=';
    $value: $expression;
  }

  // Checking what type of expression we're dealing with
  @if map-has-key($breakpoints, $value) {
    $result: map-get($breakpoints, $value);
  } @else if map-has-key($media-expressions, $expression) {
    $result: map-get($media-expressions, $expression);
    $is-width: false;
    @warn $is-width;
  } @else {
    $unit: _getUnit($value);
    $result: _getNumber($value);
    // Add the original unit
    $result: $result * $unit;
  }

  // If we're dealing with a width (breakpoint or custom value),
  // we form the expression taking into account the operator.
  @if ($is-width) {
    @if ($operator == ">") {
      $element: "(min-width: #{$result + 1})";
    } @else if ($operator == "<") {
      $element: "(max-width: #{$result - 1})";
    } @else if ($operator == ">=") {
      $element: "(min-width: #{$result})";
    } @else if ($operator == "<=") {
      $element: "(max-width: #{$result})";
    }
  } @else {
    $element: $result;
  }

  @return $element;
}


///  This a REVISED function BY Eduardo BouÃ§as
///
///  https://davidwalsh.name/sass-media-query
///
///  @require $breakpoints
///  @require $media-expressions
///

@function parse-expression($expression, $i, $length) {
  $operator: "";
  $value: "";
  $unit: "";
  $element: "";
  $result: "";
  $is-width: true;


  // Separating the operator from the rest of the expression
  @if (str-slice($expression, 2, 2) == "=") {
    $operator: str-slice($expression, 1, 2);
    $value: str-slice($expression, 3);
  } @else if ((str-slice($expression, 1, 1) == "=") or
              (str-slice($expression, 1, 1) == "<") or
              (str-slice($expression, 1, 1) == ">")) {
    $operator: str-slice($expression, 1, 1);
    $value: str-slice($expression, 2);
  } @else {
    // If an operator was not provided
    @if ($i < $length) {
      $operator: '>='; // the expression isn't the last one, left side (min-width)
    } @else {
      $operator: '<='; // when the expression is the last one, right side (max-width)
    }
    $value: $expression;
  }

  // Checking what type of expression we're dealing with
  @if map-has-key($breakpoints, $value) {
    $result: map-get($breakpoints, $value);
  } @else if map-has-key($media-expressions, $expression) {
    $result: map-get($media-expressions, $expression);
    $is-width: false;
  } @else {
    $unit: _getUnit($value);
    $result: _getNumber($value);
    @if ($unit) {
      // Add the original unit
      $result: $result * $unit;
    } @else {
      @error "Please provide a value with a valid Unit (px, pt, em)";
    }
  }

  // If we're dealing with a width (breakpoint or custom value),
  // we form the expression taking into account the operator.
  @if ($is-width) {
    @if ($operator == ">") {
      $element: "(min-width: #{$result + 1})";
    } @else if ($operator == "<") {
      $element: "(max-width: #{$result - 1})";
    } @else if ($operator == ">=") {
      $element: "(min-width: #{$result})";
    } @else if ($operator == "<=") {
      $element: "(max-width: #{$result})";
    }
  } @else {
    $element: $result;
  }

  @return $element;
}

@function get-query-branches($expressions) {
  $result: "";
  $has-groups: false;

  // Getting initial snapshot and looking for groups
  @each $expression in $expressions {
    @if (str-length($result) != 0) {
      $result: $result + " and ";
    }

    @if (type-of($expression) == "string") {
      $result: $result + $expression;
    } @else if (type-of($expression) == "list") {
      $result: $result + nth($expression, 1);
      $has-groups: true;
    }
  }

  // If we have groups, we have to create all possible combinations
  @if $has-groups {
    @each $expression in $expressions {
      @if (type-of($expression) == "list") {
        $first: nth($expression, 1);

        @each $member in $expression {
          @if ($member != $first) {
            @each $partial in $result {
              $result: join($result, str-replace-first($first, $member, $partial));
            }
          }
        }
      }
    }
  }

  @return $result;
}

@function str-replace-first($search, $replace, $subject) {
  $search-start: str-index($subject, $search);

  @if $search-start == null {
    @return $subject;
  }

  $result: str-slice($subject, 0, $search-start - 1);
  $result: $result + $replace;
  $result: $result + str-slice($subject, $search-start + str-length($search));

  @return $result;
}

///
/// Get a configuration value from a property (or sub property)
///
/// @param {String} $conf - The configuration's name
/// @param {String} $property - The property's name
/// @param {String} $subProperty - A sub property's name [optional]
/// @return {Value}
/// @require $conf
///
/// @example
///   $conf: (
///     width: (
///       base: 80%,
///       media: (
///         '>=Tablet': 500px,
///         base: 200px
///       )
///     ),
///     height: 100px
///   );
///
///   In this example, the $conf map contains two property with the same name: 'base'
///   Using the $property parameter only, the 'conf' function returns the value of
///   the first occurence (if any). Using the $property and $subProperty paramaters
///   we give a more specific query and the 'conf' function gives back the second
///    occurence of the 'base' option instead.
///
///   conf($conf-c-modal, media)  ---> 80%
///
///   conf($conf-c-modal, media, base) --> 200px
///
///   If are looking for a map nested inside the $conf map, the 'conf' function
///   returns it as it is
///
///   conf($conf-c-modal, width)   ---> (
///                                     base: 80%,
///                                     media: (
///                                       '>=Tablet': 500px,
///                                       base: 200px
///                                     )
///

@function conf($conf, $property, $subProperty:null) {

  @if not is-map($conf) {
    @error 'The option `#{$conf} is not a map.'
  }

  $result: '';

  @if map-has-key($conf, $property) {
    @if is-map(map-get($conf, $property)) and ($subProperty != null) {
      $conf: map-get($conf, $property);
      $result: conf($conf, $subProperty);
    } @else {
      $result: map-get($conf, $property);
    }
  } @else {
    // Try to find a property nested inside other list
      @each $prop, $value in $conf {
        @if is-map($value) {
          $result: conf($value, $property, $subProperty);
        }
      }
  }

  @if $result == '' {
    @error  'The option `#{$property} does not exist in $conf. ';
  }

  @return $result;
}

///
/// Get a z-index value from a layer name
///
/// @param {String} $layer - Layer's name
/// @return {Number}
/// @require $z-indexes
///

@function z($layer) {

  @if not map-has-key($z-indexes, $layer) {
    @error  'The layer `#{$layer} does not exist in $z-indexes. '
          + 'Layer should be one of #{ map-keys($z-indexes) }.';
  }

  @return map-get($z-indexes, $layer)
}

///
/// Given a string, it converts the provided value into a number
/// http://hugogiraudel.com/2014/01/27/casting-types-in-sass/
///
/// @param {String} $value - A value like 1px, 20px, 34%
/// @return {Number}
///

@function to-number($value) {
  $result: 0;
  $digits: 0;
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  $unit: '';

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i, $i);


    @if not map-get($numbers, $character) {
      @return false;
    }

    @if ($digits == 0) {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return $result;
}

///
/// Given a value, it returns its numeri part
///
/// @param {String} $value - A value like 1px, 20px, 34%
/// @return {Number}
///

@function _getNumber($value) {

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i);

    @if map-has-key($units, $character) {
      @return to-number(str-replace-first($character, '', $value));
    }
  }

  @warn 'Not a valid value';
  @return false;
}

///
/// Given a value, it returns its Unit (if any, false otherwise)
///
/// @param {String} $value - A value like 1px, 20px, 34%
/// @return {Number}
///

@function _getUnit($value) {

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, -$i);

    @if map-has-key($units, $character) {
      @return map-get($units, $character);
    }
  }

  @warn 'Not a valid value';
  @return false;
}

/// It merges the elements from $ext-obj into $obj
///
/// @param {Map} $obj - The base map of elements
/// @param {Map} $ext-obj - A map containing the additional elements we wish to merge
/// @return {Map}


@function extend($obj, $ext-obj) {
  @return map-merge($obj, $ext-obj);
}

/// Check if the provided parameter is a map
///
/// @param {Value} $obj - The value to check
/// @return {Boolean}

@function is-map($map) {
  @return type-of($map) == 'map';
}

/// Replace properties for -ms-
///
/// @param {Value} $value - The property to check
/// @return {String}

@function fix-flex($value) {
  @if (str-index($value, '-between')) {
    @return justify;
  } @else if (str-index($value, '-around')) {
    @return distribute;
  } @else if (str-index($value, '-start') or str-index($value, '-end')) {
    @return str-replace-first('flex-', '', $value);
  } @else {
    @return $value;
  }
}


/// Check if a List contains a property
///
/// @param {List} $list - The List's name
/// @param {String} $needle [base] - The property you are looking for
/// @return {Boolean}

@function contains(/* List */ $list, /* Any */ $needle) {
  @return not not index($list, $needle);
}

